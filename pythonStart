### Strings:  
print("I am Ata and I used to live in IzmÄ±r \nCurrently I am studying in Istanbul")  ## \n skips to the next row

x = "Hello World !"
print(len(x))
     
txt = "We are the so-called \"Yildizs\" from the Istanbul."  ## \ prints the " for this text


### Integers: 1,2,3,4,5,6,7,8,9,10,11,12 .....
### Float: 0.1, 0.2, 0.3, ....., 1.6, ...., 5.5, ...      
### Complex: 1j, 3+5j, .....


### Booleans:
print(10 > 9)
print(2 < 1)

a = 45
b = 35
if a+b >= 70:
      print("Correct!")
else: 
    print("False :(")

print(bool("Yo yo yo !"))
print(bool(41))
print(bool(0))
print(bool(""))

def myFunction():
    return False

if myFunction():
      print("True")
else:
      print("Its false sorry :)")

x = 5
y = 5 
print(x is y)

another = "Text"
print(isinstance(another,str))
  

### WRITING INTEGER INTO A STRING
# format method 
a = int
h_txt = "{} is greater than 10"
b_txt = "{} is less than 10 but higher than 5"
l_txt = "{} is less than 10"

def formula(a):
      if a > 10:
          print(h_txt.format(a))
      elif a == 10: 
          print(f"a is {a}")
      elif a > 5:
          print(b_txt.format(a))
      elif a == 5: 
          print(f"a is {a}")
      else:
          print(l_txt.format(a))
              
formula(10)
formula(7)
formula(15)
formula(5)

## example 
width = 30
length = 30 
depth = 30 

cube_extension = "this cube's width is {}, length is {} and the depth is {}."
my_cube = cube_extension.format(width, length, depth)
print(my_cube)   

## example 
cost = 25.9
time = 7
indigriends = "chicken", "salt", "pepper", "thyme"
receipe = ("this reciepe has {}, and needs {} minutes to cook and costs {} $")
print(receipe.format(indigriends,time,cost))  


### LISTS
thisList = ["apple", "banana", 4 , True]   
print(thisList)

thisList[1] = "watermelon"
print(thisList)

thisList.insert(1,"melon")
print(thisList)

thisList.append(64)
print(thisList)

thatList = ["red", "yellow", "green", 4, True, 64]
thisList.extend(thatList)
print(thisList)

#remove first 2 item
thisList.remove("apple") #this one remove the actual first item
thisList.pop(0)  #after removing actual first item the 2nd item will be first item so this code will remove the current first item 
print(thisList)

del thatList

thisList.clear()
print(thisList)

thisList.extend(["blue", "red", "purple"])
thisList.append("yellow")
print(thisList)

list1 = [1, 2, 3, 4, 1, 1, 1, 4, 5]   ##shows me the "number 4" between 4-8 index
print(list1.index(4, 4, 8))


## append()	 Adds an element at the end of the list
## clear()	 Removes all the elements from the list
## copy()	 Returns a copy of the list
## count()	 Returns the number of elements with the specified value
## extend()	 Add the elements of a list (or any iterable), to the end of the current list
## index()	 Returns the index of the first element with the specified value
## insert()	 Adds an element at the specified position
## pop()	 Removes the element at the specified position
## remove()	 Removes the item with the specified value
## reverse() Reverses the order of the list
## sort()	 Sorts the list

##this code will print your list by column by column 
for x in thisList:    
    print(x)
    
for x in range(len(thisList)):
    print(thisList[x])
    
### or   
a = 0 
while a < len(thisList):
    print(thisList[a])
    a += 1

[print(a) for a in thisList]

del thisList


##List Comprehension
colors = ["blue", "red", "orange", "purple", "yellow", "green","black", "white"]
newList = []
for x in colors:
     if "u" in x:
         newList.append(x)       
print(newList)

##or

newListOr = [x for x in colors if "u" in x ]
print(newListOr)

newColors = []

for x in colors : 
    
    if x != "purple" and x != "red":
        newColors.append(x)
print(newColors)

newColors = [x.upper() for x in newColors]    
print(newColors)

for x in range(3): 
       newColors[x] = newColors[x].lower()          
print(newColors)


##SORT
newColors.sort()

def newColorsCapitalized():
    for x in range(len(colors)):
         colors[x] = colors[x].capitalize()
         x = x + 1

newColorsCapitalized()
print(colors)

colors.sort(reverse = True)
print(colors)

###
def location(n):
    return abs (n - 20)

numbers = [10, 23, 41, 54, 25]

numbers.sort(key = location)
print(numbers)

numbers.reverse()
print(numbers)


### TUPLE 
##Changing items of tuple:
x = ("apple", "banana", "cherry", "melon", "peach", "mandarin")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

print(x)

##Asteriks
(red, yellow, *red2) = x 

print(red)
print(yellow)
print(red2)

##
fruits = ("apple", "mango", "papaya", "pineapple", "cherry")
(green, *tropic, red) = fruits

print(green)
print(tropic)
print(red)

##loops for tuple:
a = (1,2,3,4,5,6,7,8,9)
for x in a:
      print(x)
      
for x in range(len(a)):
      print(a[x])

## or 
b = ("a","b","c","d")
x = 0 
while x != len(b):
  print(b[x])  
  x = x + 1
  
#### SET
set1 = {"apple", "banana", "cherry"}
set1.add("orange")
print(set1)

set2 =  {"pineapple", "mango", "papaya"}
set1.update(set2)
print(set1)

###### Examples and Notes
examp = {1,2,3,4,5,6,7,8,9}
examp2 = {2,3,4,5}
     

## add()	Adds an element to the set
## clear()	Removes all the elements from the set
## copy()	Returns a copy of the set
## difference()	Returns a set containing the difference between two or more sets
e = examp.difference(examp2)
print(e)

## difference_update()	Removes the items in this set that are also included in another, specified set
examp.difference_update(examp2)
print(examp)
   
## discard()	Remove the specified item
examp.discard(7)
print(examp)

## intersection()	Returns a set, that is the intersection of two other sets
content = {"blue","earphone", "phone"}
content2 = {"mouse", "laptop", "phone"}
o = content.intersection(content2)
print(o)

## intersection_update()	Removes the items in this set that are not present in other, specified set(s)
content.intersection_update(content2)
print(content)

## isdisjoint()	Returns whether two sets have a intersection or not
l = examp.isdisjoint(examp2)
print(l)

## issubset()	Returns whether another set contains this set or not
a = {1,2,3,4,5}
b = {2,3}

k = b.issubset(a)
print(k)

## issuperset()	Returns whether this set contains another set or not
g = a.issuperset(b)
print(g)

## pop()	Removes an element from the set
set2.pop()      ##pop will remove the last item. Since ses does not have any index number we wont know whick item will be deleted.     

## remove()	Removes the specified element

## symmetric_difference()	Returns a set with the symmetric differences of two sets
c = a.symmetric_difference(b)
print(c)

## symmetric_difference_update()	inserts the symmetric differences from this set and another
a.symmetric_difference_update(b)
print(a)

## union()	Return a set containing the union of sets
c = a.union(b)
print(c)

## update()	Update the set with the union of this set and others


## DICTIONARIES
car_model = {
    "brand": "porsche",
    "model": "911 turbo s",
    "year": "2024",
    "color": ["dark blue","devils red", "sunset yellow", "space black", "pure white"],
    "electricity": [True, False],
    "transmission": ["automatic", "manuel"],    
    }

print(car_model["year"])
car_model.get("model") == car_model["model"]

##Add new item 
car_model["transmission"] = ["manuel", "automatic"]

##Change or update model 
update_is = car_model.update({"electricity": "false"})
change_is = car_model["electricity"] = "false"

##Get keys
keys = car_model.keys()

## Get the specified index in list in dictionary
x = car_model["color"][0]

##Get values
values = car_model.values()

##Get items
items = car_model.items()

## Remove items
car_model.pop("electricity")
print(car_model)

## deleting or removing item
# del car_model

del car_model["transmission"]
#car_model.clear()

for x in car_model:
    print(x)

for x in car_model:
    print(car_model[x])

for x in car_model.values():
    print(x)

for x in  car_model.keys():
    print(x)

##Creating a new dictionary with already existing one 
car_model2 = car_model.copy()

car_model2["brand"] = "mercedes"
car_model2["model"] = "G-Class"
car_model2["year"] = 2024
car_model2["color"] = ["black", "hell red", "antrasit", "angel white"]
car_model2["transmission"] = ["automatic"]
car_model2["electricity"] = False

cars = {
    "car1": car_model,
    "car2": car_model2
}
print(cars["car1"])
print(cars["car2"])


##exercises

carsList = [ {"brand": "porsche", "model": "911 turbo s", "year": 2024, "color": ["dark blue","devils red", "sunset yellow", "space black", "pure white"], "electricity": [True, False],"transmission": ["automatic", "manuel"]},
          {'brand': 'mercedes', 'model': 'G-Class', 'year': 2024, 'color': ['black', 'hell red', 'antrasit', 'angel white'], 'transmission': 'automatic', 'electricity': False}
   ]

carDict = {}

for car in carsList:
    carDict.setdefault(car["brand"],[]).append(car["model"])
    carDict.setdefault(car["brand"],[]).append(car["year"])
    carDict.setdefault(car["brand"],[]).append(car["color"])
    carDict.setdefault(car["brand"],[]).append(car["transmission"])
    carDict.setdefault(car["brand"],[]).append(car["electricity"])
    

print(carDict)
print(carDict.keys())

